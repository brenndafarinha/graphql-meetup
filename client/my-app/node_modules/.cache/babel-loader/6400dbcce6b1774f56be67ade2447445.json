{"ast":null,"code":"var _jsxFileName = \"/home/farinha/Documents/graphql-meetup/client/my-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Page from './Page';\nimport NavBar from './Components/NavBar';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks'; //css da lib que usei para pegar componentes pronto, não me julguem kkk\n\nimport 'antd/dist/antd.css'; // primeiro passo para consumir um api com graphql + react + apollo é definir um client, entenda ele como o responsável\n// pela comunicação da sua aplicação (client-side) com o servidor que irá fornecer os dados (server-side)\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/' // como o nosso servidor é local, basta colocar a uri que criamos aqui. Se fosse de um serviço \"externo\", a url fornecida vem aqui tbm ;)\n\n});\n\nconst App = () => //aqui temos o ApolloProvider que ser para fazer a conexão entre sua app em react e seu client\n//até aqui tudo bem simples, certo?\nReact.createElement(ApolloProvider, {\n  client: client,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24\n  },\n  __self: this\n}, React.createElement(NavBar, {\n  backgroundColor: \"#750420\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25\n  },\n  __self: this\n}), React.createElement(Page, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26\n  },\n  __self: this\n})));\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/home/farinha/Documents/graphql-meetup/client/my-app/src/index.js"],"names":["React","ReactDOM","Page","NavBar","ApolloClient","ApolloProvider","client","uri","App","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,cAAT,QAA+B,qBAA/B,C,CAEA;;AACA,OAAO,oBAAP,C,CAEA;AACA;;AAEA,MAAMC,MAAM,GAAG,IAAIF,YAAJ,CAAiB;AAC5BG,EAAAA,GAAG,EAAE,wBADuB,CAE5B;;AAF4B,CAAjB,CAAf;;AAKA,MAAMC,GAAG,GAAG,MACR;AACA;AACA,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAEF,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,MAAD;AAAQ,EAAA,eAAe,EAAC,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,EAEI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFJ,CADJ,CAHJ;;AAWAL,QAAQ,CAACQ,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Page from './Page'\nimport NavBar from './Components/NavBar'\nimport ApolloClient from 'apollo-boost'\nimport { ApolloProvider } from '@apollo/react-hooks'\n\n//css da lib que usei para pegar componentes pronto, não me julguem kkk\nimport 'antd/dist/antd.css'\n\n// primeiro passo para consumir um api com graphql + react + apollo é definir um client, entenda ele como o responsável\n// pela comunicação da sua aplicação (client-side) com o servidor que irá fornecer os dados (server-side)\n\nconst client = new ApolloClient({\n    uri: 'http://localhost:4000/',\n    // como o nosso servidor é local, basta colocar a uri que criamos aqui. Se fosse de um serviço \"externo\", a url fornecida vem aqui tbm ;)\n})\n\nconst App = () => (\n    //aqui temos o ApolloProvider que ser para fazer a conexão entre sua app em react e seu client\n    //até aqui tudo bem simples, certo?\n    <ApolloProvider client={client}>\n        <div>\n            <NavBar backgroundColor=\"#750420\"/>\n            <Page />\n        </div>\n    </ApolloProvider>\n);\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n\n"]},"metadata":{},"sourceType":"module"}