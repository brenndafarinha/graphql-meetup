{"ast":null,"code":"var _jsxFileName = \"/home/farinha/Documents/graphql-meetup/client/my-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Page from './Page';\nimport NavBar from './Components/NavBar';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport 'antd/dist/antd.css';\nimport background from './images/background.jpg'; // primeiro passo para consumir um api com graphql + react + apollo é definir um client, entenda ele como o responsável\n// pela comunicação da sua aplicação (client-side) com o servidor que irá fornecer os dados (server-side)\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/' // como o nosso servidor é local, basta colocar a uri que criamos aqui. Se fosse de um serviço \"externo\", a url fornecida vem aqui tbm ;)\n\n});\n\nconst App = () => React.createElement(ApolloProvider, {\n  client: client,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22\n  },\n  __self: this\n}, React.createElement(NavBar, {\n  backgroundColor: \"#750420\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23\n  },\n  __self: this\n}), React.createElement(Page, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24\n  },\n  __self: this\n})));\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29\n  },\n  __self: this\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/home/farinha/Documents/graphql-meetup/client/my-app/src/index.js"],"names":["React","ReactDOM","Page","NavBar","serviceWorker","ApolloClient","ApolloProvider","background","client","uri","App","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,OAAO,oBAAP;AACA,OAAOC,UAAP,MAAuB,yBAAvB,C,CAEA;AACA;;AAEA,MAAMC,MAAM,GAAG,IAAIH,YAAJ,CAAiB;AAC5BI,EAAAA,GAAG,EAAE,wBADuB,CAE5B;;AAF4B,CAAjB,CAAf;;AAKA,MAAMC,GAAG,GAAG,MACR,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAEF,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,MAAD;AAAQ,EAAA,eAAe,EAAC,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,EAEI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFJ,CADJ,CADJ;;AASAP,QAAQ,CAACU,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB,E,CAEA;AACA;AACA;;AACAT,aAAa,CAACU,UAAd","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Page from './Page'\nimport NavBar from './Components/NavBar'\nimport * as serviceWorker from './serviceWorker'\nimport ApolloClient from 'apollo-boost'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport 'antd/dist/antd.css'\nimport background from './images/background.jpg'\n\n// primeiro passo para consumir um api com graphql + react + apollo é definir um client, entenda ele como o responsável\n// pela comunicação da sua aplicação (client-side) com o servidor que irá fornecer os dados (server-side)\n\nconst client = new ApolloClient({\n    uri: 'http://localhost:4000/',\n    // como o nosso servidor é local, basta colocar a uri que criamos aqui. Se fosse de um serviço \"externo\", a url fornecida vem aqui tbm ;)\n})\n\nconst App = () => (\n    <ApolloProvider client={client}>\n        <div>\n            <NavBar backgroundColor=\"#750420\"/>\n            <Page />\n        </div>\n    </ApolloProvider>\n);\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}